{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ALL_POSITIONS","ALL_OUTCOMES","flatMap","x","filter","Boolean","POS_POINTS","1","2","3","4","5","6","7","8","9","10","11","outcomePoints","out","outcomeToString","value","toString","hamInitial","verInitial","App","useState","saResultHam","setSaResultHam","saResultVer","setSaResultVer","abuResults","d1Points","d2Points","d1WinningOutcomes","d2WinningOutcomes","drawOutcomes","d1WinningResults","Set","d2WinningResults","d1Outcome","d2Outcome","d1FinalPoints","d2FinalPoints","has","push","add","calculatePossibleOutcomes","className","onChange","e","old","parseInt","target","map","pos","type","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf238b2e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ntype Position = \n| 1\n| 2\n| 3\n| 4\n| 5\n| 6\n| 7\n| 8\n| 9\n| 10\n| 11;\n\nconst ALL_POSITIONS: Position[] = [1,2,3,4,5,6,7,8,9,10, 11];\n\n// position, fastest lap\ntype Outcome = [Position, boolean];\n\nconst ALL_OUTCOMES: Outcome[] = ALL_POSITIONS.flatMap(x => [[x, false], x < 11 ? [x, true] : false].filter(Boolean) as Outcome[]);\n\nconst POS_POINTS: {[k in Position]: number} = {\n  1: 25,\n  2: 18,\n  3: 15,\n  4: 12,\n  5: 10,\n  6: 8,\n  7: 6,\n  8: 4,\n  9: 2,\n  10: 1,\n  11: 0\n};\nconst FASTEST_LAP_POINTS = 1;\n\nfunction outcomePoints(out: Outcome): number {\n  return POS_POINTS[out[0]] + (out[1] ? FASTEST_LAP_POINTS : 0);\n}\n\nfunction outcomeToString(out: Outcome): string {\n  let value = \"P\" + out[0].toString(10);\n  if (out[0] === 11) {\n    value = \"P11 or lower\";\n  }\n  if (out[1]) {\n    value += \" + fastest lap\";\n  }\n  return value;\n}\n\nfunction calculatePossibleOutcomes(d1Points: number, d2Points: number) {\n  const d1WinningOutcomes: [Outcome, Outcome][] = [];\n  const d2WinningOutcomes: [Outcome, Outcome][] = [];\n  const drawOutcomes: [Outcome, Outcome][] = [];\n  const d1WinningResults = new Set<number>();\n  const d2WinningResults = new Set<number>();\n  for (const d1Outcome of ALL_OUTCOMES) {\n    for (const d2Outcome of ALL_OUTCOMES) {\n      if ((d1Outcome[0] !== d2Outcome[0]) || (d1Outcome[0] === 11 && d2Outcome[0] === 11)) {\n        const d1FinalPoints = d1Points + outcomePoints(d1Outcome);\n        const d2FinalPoints = d2Points + outcomePoints(d2Outcome);\n        if (d1FinalPoints > d2FinalPoints && !d1WinningResults.has(d1Outcome[0])) {\n          d1WinningOutcomes.push([d1Outcome, d2Outcome]);\n          d1WinningResults.add(d1Outcome[0]);\n        } else if (d2FinalPoints > d1FinalPoints && !d2WinningResults.has(d2Outcome[0])) {\n          d2WinningOutcomes.push([d2Outcome, d1Outcome]);\n          d2WinningResults.add(d2Outcome[0]);\n        } else if (d1FinalPoints === d2FinalPoints) {\n          drawOutcomes.push([d1Outcome, d2Outcome]);\n        }\n      }\n    }\n  }\n  return {\n    d1WinningOutcomes,\n    d2WinningOutcomes,\n    drawOutcomes\n  };\n}\n\nconst hamInitial = 343.5;\nconst verInitial = 351.5;\n\nfunction App() {\n  const [saResultHam, setSaResultHam] = useState<Outcome>([2, true]);\n  const [saResultVer, setSaResultVer] = useState<Outcome>([1, false]);\n  const abuResults = calculatePossibleOutcomes(hamInitial + outcomePoints(saResultHam), verInitial + outcomePoints(saResultVer));\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>2021 F1 Championship simulator</h1>\n      </header>\n      <div>\n        <h2>Standings after Qatar:</h2>\n        Hamilton: {hamInitial}, Verstappen: {verInitial}\n      </div>\n      <div>\n        <h2>Saudi Arabia results</h2>\n        <div>\n          <b>Hamilton</b>:\n          <select value={saResultHam[0].toString(10)} onChange={e => setSaResultHam(old => [parseInt(e.target.value) as Position, old[1]])}>\n            {ALL_POSITIONS.map(pos => <option value={pos.toString(10)}>{pos}</option>)}\n          </select>\n          <label>\n            <input type=\"checkbox\" checked={saResultHam[1]} onChange={e => setSaResultHam(old => [old[0], e.target.checked])} />\n            Fastest Lap\n          </label>\n          &nbsp;({hamInitial + outcomePoints(saResultHam)} points)\n        </div>\n        <div>\n          <b>Verstappen</b>:\n          <select value={saResultVer[0].toString(10)} onChange={e => setSaResultVer(old => [parseInt(e.target.value) as Position, old[1]])}>\n            {ALL_POSITIONS.map(pos => <option value={pos.toString(10)}>{pos}</option>)}\n          </select>\n          <label>\n            <input type=\"checkbox\" checked={saResultVer[1]} onChange={e => setSaResultVer(old => [old[0], e.target.checked])} />\n            Fastest Lap\n          </label>\n          &nbsp;({verInitial + outcomePoints(saResultVer)} points)\n        </div>\n      </div>\n      <div>\n        <h2>Results after Abu Dhabi:</h2>\n        <h3>Hamilton wins the title if&hellip;</h3>\n        <ul>\n        {abuResults.d1WinningOutcomes.map((out) => <li key={outcomeToString(out[0]) + outcomeToString(out[1])}>\n          he finishes <em>{outcomeToString(out[0])}</em> and Verstappen finishes <em>{outcomeToString(out[1])}</em> or below\n          &nbsp;({hamInitial + outcomePoints(saResultHam) + outcomePoints(out[0])} / {verInitial + outcomePoints(saResultVer) + outcomePoints(out[1])} points)\n        </li>)}\n        </ul>\n        <h3>Verstappen wins the title if&hellip;</h3>\n        <ul>\n        {abuResults.d2WinningOutcomes.map((out) => <li key={outcomeToString(out[0]) + outcomeToString(out[1])}>\n          he finishes <em>{outcomeToString(out[0])}</em> and Hamilton finishes <em>{outcomeToString(out[1])}</em> or below\n          &nbsp;({verInitial + outcomePoints(saResultVer) + outcomePoints(out[0])} / {hamInitial + outcomePoints(saResultHam) + outcomePoints(out[1])} points)\n        </li>)}\n        </ul>\n        <h3>Tied if&hellip;</h3>\n        <ul>\n        {abuResults.drawOutcomes.map((out) => <li key={outcomeToString(out[0]) + outcomeToString(out[1])}>\n          Hamilton finishes <em>{outcomeToString(out[0])}</em> and Verstappen finishes <em>{outcomeToString(out[1])}</em>\n          &nbsp;({hamInitial + outcomePoints(saResultHam) + outcomePoints(out[0])} / {verInitial + outcomePoints(saResultVer) + outcomePoints(out[1])} points)\n        </li>)}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}